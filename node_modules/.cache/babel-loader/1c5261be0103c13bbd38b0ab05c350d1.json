{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Lenovo\\\\FullStackTech\\\\architectui-react-pro-1.5.2\\\\architectui-react-pro-1.5.2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Lenovo\\\\FullStackTech\\\\architectui-react-pro-1.5.2\\\\architectui-react-pro-1.5.2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Lenovo\\\\FullStackTech\\\\architectui-react-pro-1.5.2\\\\architectui-react-pro-1.5.2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Lenovo\\\\FullStackTech\\\\architectui-react-pro-1.5.2\\\\architectui-react-pro-1.5.2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Lenovo\\\\FullStackTech\\\\architectui-react-pro-1.5.2\\\\architectui-react-pro-1.5.2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\Lenovo\\\\FullStackTech\\\\architectui-react-pro-1.5.2\\\\architectui-react-pro-1.5.2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\FullStackTech\\\\architectui-react-pro-1.5.2\\\\architectui-react-pro-1.5.2\\\\src\\\\DemoPages\\\\Components\\\\Maps\\\\Examples\\\\VectorMaps\\\\Datasets.js\";\nimport React, { Fragment } from 'react';\nimport { Button } from 'reactstrap';\nimport { ComposableMap, ZoomableGroup, Geographies, Geography } from \"react-simple-maps\";\nimport chroma from \"chroma-js\";\nimport { scaleLinear } from \"d3-scale\";\nimport world from './Static/world-50m-with-population.json';\nvar colorScale = chroma.scale(['#FF6E40', 'FFD740', '#00B8D4']).mode('lch').colors(24);\nvar subregions = [\"Southern Asia\", \"Polynesia\", \"Micronesia\", \"Southern Africa\", \"Central Asia\", \"Melanesia\", \"Western Europe\", \"Central America\", \"Seven seas (open ocean)\", \"Northern Africa\", \"Caribbean\", \"South-Eastern Asia\", \"Eastern Africa\", \"Australia and New Zealand\", \"Eastern Europe\", \"Western Africa\", \"Southern Europe\", \"Eastern Asia\", \"South America\", \"Middle Africa\", \"Antarctica\", \"Northern Europe\", \"Northern America\", \"Western Asia\"];\nvar popScale = scaleLinear().domain([0, 100000000, 1400000000]).range([\"#CFD8DC\", \"#adb5bd\", \"#37474F\"]);\n\nvar VectorMapsDatasets = /*#__PURE__*/function (_React$Component) {\n  _inherits(VectorMapsDatasets, _React$Component);\n\n  function VectorMapsDatasets() {\n    var _this;\n\n    _classCallCheck(this, VectorMapsDatasets);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VectorMapsDatasets).call(this));\n    _this.state = {\n      populationData: true\n    };\n    _this.switchToPopulation = _this.switchToPopulation.bind(_assertThisInitialized(_this));\n    _this.switchToRegions = _this.switchToRegions.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(VectorMapsDatasets, [{\n    key: \"switchToPopulation\",\n    value: function switchToPopulation() {\n      this.setState({\n        populationData: true\n      });\n    }\n  }, {\n    key: \"switchToRegions\",\n    value: function switchToRegions() {\n      this.setState({\n        populationData: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-center mb-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        color: \"primary\",\n        className: \"mr-1\",\n        onClick: this.switchToPopulation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }\n      }, \"Population data\"), /*#__PURE__*/React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.switchToRegions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }\n      }, \"World subregions\")), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ComposableMap, {\n        projectionConfig: {\n          scale: 205,\n          rotation: [-11, 0, 0]\n        },\n        width: 980,\n        height: 551,\n        style: {\n          width: \"100%\",\n          height: \"auto\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(ZoomableGroup, {\n        center: [0, 20],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Geographies, {\n        geography: world,\n        disableOptimization: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }\n      }, function (geographies, projection) {\n        return geographies.map(function (geography, i) {\n          return /*#__PURE__*/React.createElement(Geography, {\n            key: \"\".concat(geography.properties.iso_a3, \"-\").concat(i),\n            cacheId: \"\".concat(geography.properties.iso_a3, \"-\").concat(i),\n            geography: geography,\n            projection: projection,\n            onClick: _this2.handleClick,\n            round: true,\n            style: {\n              default: {\n                fill: _this2.state.populationData ? popScale(geography.properties.pop_est) : colorScale[subregions.indexOf(geography.properties.subregion)],\n                stroke: \"#adb5bd\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              hover: {\n                fill: _this2.state.populationData ? \"#263238\" : chroma(colorScale[subregions.indexOf(geography.properties.subregion)]).darken(0.5),\n                stroke: \"#adb5bd\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              pressed: {\n                fill: _this2.state.populationData ? \"#263238\" : chroma(colorScale[subregions.indexOf(geography.properties.subregion)]).brighten(0.5),\n                stroke: \"#adb5bd\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              }\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 41\n            }\n          });\n        });\n      })))));\n    }\n  }]);\n\n  return VectorMapsDatasets;\n}(React.Component);\n\nexport { VectorMapsDatasets as default };","map":{"version":3,"sources":["C:/Users/Lenovo/FullStackTech/architectui-react-pro-1.5.2/architectui-react-pro-1.5.2/src/DemoPages/Components/Maps/Examples/VectorMaps/Datasets.js"],"names":["React","Fragment","Button","ComposableMap","ZoomableGroup","Geographies","Geography","chroma","scaleLinear","world","colorScale","scale","mode","colors","subregions","popScale","domain","range","VectorMapsDatasets","state","populationData","switchToPopulation","bind","switchToRegions","setState","rotation","width","height","geographies","projection","map","geography","i","properties","iso_a3","handleClick","default","fill","pop_est","indexOf","subregion","stroke","strokeWidth","outline","hover","darken","pressed","brighten","Component"],"mappings":"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","sourcesContent":["import React, {Fragment} from 'react';\n\nimport {\n    Button,\n} from 'reactstrap';\n\nimport {\n    ComposableMap,\n    ZoomableGroup,\n    Geographies,\n    Geography,\n} from \"react-simple-maps\"\nimport chroma from \"chroma-js\"\nimport {scaleLinear} from \"d3-scale\"\n\nimport world from './Static/world-50m-with-population.json';\n\nconst colorScale = chroma\n    .scale([\n        '#FF6E40',\n        'FFD740',\n        '#00B8D4',\n    ])\n    .mode('lch')\n    .colors(24)\n\nconst subregions = [\n    \"Southern Asia\",\n    \"Polynesia\",\n    \"Micronesia\",\n    \"Southern Africa\",\n    \"Central Asia\",\n    \"Melanesia\",\n    \"Western Europe\",\n    \"Central America\",\n    \"Seven seas (open ocean)\",\n    \"Northern Africa\",\n    \"Caribbean\",\n    \"South-Eastern Asia\",\n    \"Eastern Africa\",\n    \"Australia and New Zealand\",\n    \"Eastern Europe\",\n    \"Western Africa\",\n    \"Southern Europe\",\n    \"Eastern Asia\",\n    \"South America\",\n    \"Middle Africa\",\n    \"Antarctica\",\n    \"Northern Europe\",\n    \"Northern America\",\n    \"Western Asia\",\n]\n\nconst popScale = scaleLinear()\n    .domain([0, 100000000, 1400000000])\n    .range([\"#CFD8DC\", \"#adb5bd\", \"#37474F\"])\n\n\nexport default class VectorMapsDatasets extends React.Component {\n    constructor() {\n        super()\n\n        this.state = {\n            populationData: true,\n        }\n\n        this.switchToPopulation = this.switchToPopulation.bind(this)\n        this.switchToRegions = this.switchToRegions.bind(this)\n    }\n\n    switchToPopulation() {\n        this.setState({populationData: true})\n    }\n\n    switchToRegions() {\n        this.setState({populationData: false})\n    }\n\n    render() {\n\n        return (\n            <Fragment>\n                <div className=\"text-center mb-2\">\n                    <Button color=\"primary\" className=\"mr-1\" onClick={this.switchToPopulation}>\n                        {\"Population data\"}\n                    </Button>\n                    <Button color=\"primary\" onClick={this.switchToRegions}>\n                        {\"World subregions\"}\n                    </Button>\n                </div>\n                <div>\n                    <ComposableMap\n                        projectionConfig={{\n                            scale: 205,\n                            rotation: [-11, 0, 0],\n                        }}\n                        width={980}\n                        height={551}\n                        style={{\n                            width: \"100%\",\n                            height: \"auto\",\n                        }}\n                    >\n                        <ZoomableGroup center={[0, 20]}>\n                            <Geographies\n                                geography={world}\n                                disableOptimization\n                            >\n                                {(geographies, projection) =>\n                                    geographies.map((geography, i) => (\n                                        <Geography\n                                            key={`${geography.properties.iso_a3}-${i}`}\n                                            cacheId={`${geography.properties.iso_a3}-${i}`}\n                                            geography={geography}\n                                            projection={projection}\n                                            onClick={this.handleClick}\n                                            round\n                                            style={{\n                                                default: {\n                                                    fill: this.state.populationData\n                                                        ? popScale(geography.properties.pop_est)\n                                                        : colorScale[subregions.indexOf(geography.properties.subregion)],\n                                                    stroke: \"#adb5bd\",\n                                                    strokeWidth: 0.75,\n                                                    outline: \"none\",\n                                                },\n                                                hover: {\n                                                    fill: this.state.populationData\n                                                        ? \"#263238\"\n                                                        : chroma(colorScale[subregions.indexOf(geography.properties.subregion)]).darken(0.5),\n                                                    stroke: \"#adb5bd\",\n                                                    strokeWidth: 0.75,\n                                                    outline: \"none\",\n                                                },\n                                                pressed: {\n                                                    fill: this.state.populationData\n                                                        ? \"#263238\"\n                                                        : chroma(colorScale[subregions.indexOf(geography.properties.subregion)]).brighten(0.5),\n                                                    stroke: \"#adb5bd\",\n                                                    strokeWidth: 0.75,\n                                                    outline: \"none\",\n                                                }\n                                            }}\n                                        />\n                                    ))}\n                            </Geographies>\n                        </ZoomableGroup>\n                    </ComposableMap>\n                </div>\n            </Fragment>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}