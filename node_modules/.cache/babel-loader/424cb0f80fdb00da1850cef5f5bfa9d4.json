{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.filters = exports.filterFactory = exports.filterByArray = exports.filterByDate = exports.filterByNumber = exports.filterByText = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/* eslint eqeqeq: 0 */\n\n/* eslint no-console: 0 */\n\n\nvar _const = require('./const');\n\nvar _comparison = require('./comparison');\n\nvar filterByText = exports.filterByText = function filterByText(_) {\n  return function (data, dataField, _ref, customFilterValue) {\n    var _ref$filterVal = _ref.filterVal,\n        userInput = _ref$filterVal === undefined ? '' : _ref$filterVal,\n        _ref$comparator = _ref.comparator,\n        comparator = _ref$comparator === undefined ? _comparison.LIKE : _ref$comparator,\n        caseSensitive = _ref.caseSensitive; // make sure filter value to be a string\n\n    var filterVal = userInput.toString();\n    return data.filter(function (row) {\n      var cell = _.get(row, dataField);\n\n      if (customFilterValue) {\n        cell = customFilterValue(cell, row);\n      }\n\n      var cellStr = _.isDefined(cell) ? cell.toString() : '';\n\n      if (comparator === _comparison.EQ) {\n        return cellStr === filterVal;\n      }\n\n      if (caseSensitive) {\n        return cellStr.includes(filterVal);\n      }\n\n      return cellStr.toLocaleUpperCase().indexOf(filterVal.toLocaleUpperCase()) !== -1;\n    });\n  };\n};\n\nvar filterByNumber = exports.filterByNumber = function filterByNumber(_) {\n  return function (data, dataField, _ref2, customFilterValue) {\n    var _ref2$filterVal = _ref2.filterVal,\n        comparator = _ref2$filterVal.comparator,\n        number = _ref2$filterVal.number;\n    return data.filter(function (row) {\n      if (number === '' || !comparator) return true;\n\n      var cell = _.get(row, dataField);\n\n      if (customFilterValue) {\n        cell = customFilterValue(cell, row);\n      }\n\n      switch (comparator) {\n        case _comparison.EQ:\n          {\n            return cell == number;\n          }\n\n        case _comparison.GT:\n          {\n            return cell > number;\n          }\n\n        case _comparison.GE:\n          {\n            return cell >= number;\n          }\n\n        case _comparison.LT:\n          {\n            return cell < number;\n          }\n\n        case _comparison.LE:\n          {\n            return cell <= number;\n          }\n\n        case _comparison.NE:\n          {\n            return cell != number;\n          }\n\n        default:\n          {\n            console.error('Number comparator provided is not supported');\n            return true;\n          }\n      }\n    });\n  };\n};\n\nvar filterByDate = exports.filterByDate = function filterByDate(_) {\n  return function (data, dataField, _ref3, customFilterValue) {\n    var _ref3$filterVal = _ref3.filterVal,\n        comparator = _ref3$filterVal.comparator,\n        date = _ref3$filterVal.date;\n    if (!date || !comparator) return data;\n    var filterDate = date.getUTCDate();\n    var filterMonth = date.getUTCMonth();\n    var filterYear = date.getUTCFullYear();\n    return data.filter(function (row) {\n      var valid = true;\n\n      var cell = _.get(row, dataField);\n\n      if (customFilterValue) {\n        cell = customFilterValue(cell, row);\n      }\n\n      if ((typeof cell === 'undefined' ? 'undefined' : _typeof(cell)) !== 'object') {\n        cell = new Date(cell);\n      }\n\n      var targetDate = cell.getUTCDate();\n      var targetMonth = cell.getUTCMonth();\n      var targetYear = cell.getUTCFullYear();\n\n      switch (comparator) {\n        case _comparison.EQ:\n          {\n            if (filterDate !== targetDate || filterMonth !== targetMonth || filterYear !== targetYear) {\n              valid = false;\n            }\n\n            break;\n          }\n\n        case _comparison.GT:\n          {\n            if (cell <= date) {\n              valid = false;\n            }\n\n            break;\n          }\n\n        case _comparison.GE:\n          {\n            if (targetYear < filterYear) {\n              valid = false;\n            } else if (targetYear === filterYear && targetMonth < filterMonth) {\n              valid = false;\n            } else if (targetYear === filterYear && targetMonth === filterMonth && targetDate < filterDate) {\n              valid = false;\n            }\n\n            break;\n          }\n\n        case _comparison.LT:\n          {\n            if (cell >= date) {\n              valid = false;\n            }\n\n            break;\n          }\n\n        case _comparison.LE:\n          {\n            if (targetYear > filterYear) {\n              valid = false;\n            } else if (targetYear === filterYear && targetMonth > filterMonth) {\n              valid = false;\n            } else if (targetYear === filterYear && targetMonth === filterMonth && targetDate > filterDate) {\n              valid = false;\n            }\n\n            break;\n          }\n\n        case _comparison.NE:\n          {\n            if (filterDate === targetDate && filterMonth === targetMonth && filterYear === targetYear) {\n              valid = false;\n            }\n\n            break;\n          }\n\n        default:\n          {\n            console.error('Date comparator provided is not supported');\n            break;\n          }\n      }\n\n      return valid;\n    });\n  };\n};\n\nvar filterByArray = exports.filterByArray = function filterByArray(_) {\n  return function (data, dataField, _ref4) {\n    var filterVal = _ref4.filterVal,\n        comparator = _ref4.comparator;\n    if (filterVal.length === 0) return data;\n    var refinedFilterVal = filterVal.filter(function (x) {\n      return _.isDefined(x);\n    }).map(function (x) {\n      return x.toString();\n    });\n    return data.filter(function (row) {\n      var cell = _.get(row, dataField);\n\n      var cellStr = _.isDefined(cell) ? cell.toString() : '';\n\n      if (comparator === _comparison.EQ) {\n        return refinedFilterVal.indexOf(cellStr) !== -1;\n      }\n\n      cellStr = cellStr.toLocaleUpperCase();\n      return refinedFilterVal.some(function (item) {\n        return cellStr.indexOf(item.toLocaleUpperCase()) !== -1;\n      });\n    });\n  };\n};\n\nvar filterFactory = exports.filterFactory = function filterFactory(_) {\n  return function (filterType) {\n    switch (filterType) {\n      case _const.FILTER_TYPE.MULTISELECT:\n        return filterByArray(_);\n\n      case _const.FILTER_TYPE.NUMBER:\n        return filterByNumber(_);\n\n      case _const.FILTER_TYPE.DATE:\n        return filterByDate(_);\n\n      case _const.FILTER_TYPE.TEXT:\n      case _const.FILTER_TYPE.SELECT:\n      default:\n        // Use `text` filter as default filter\n        return filterByText(_);\n    }\n  };\n};\n\nvar filters = exports.filters = function filters(data, columns, _) {\n  return function (currFilters) {\n    var clearFilters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var factory = filterFactory(_);\n\n    var filterState = _extends({}, clearFilters, currFilters);\n\n    var result = data;\n    var filterFn = void 0;\n    Object.keys(filterState).forEach(function (dataField) {\n      var currentResult = void 0;\n      var filterValue = void 0;\n      var customFilter = void 0;\n\n      for (var i = 0; i < columns.length; i += 1) {\n        if (columns[i].dataField === dataField) {\n          filterValue = columns[i].filterValue;\n\n          if (columns[i].filter) {\n            customFilter = columns[i].filter.props.onFilter;\n          }\n\n          break;\n        }\n      }\n\n      if (clearFilters[dataField] && customFilter) {\n        currentResult = customFilter(clearFilters[dataField].filterVal, result);\n\n        if (typeof currentResult !== 'undefined') {\n          result = currentResult;\n        }\n      } else {\n        var filterObj = filterState[dataField];\n        filterFn = factory(filterObj.filterType);\n\n        if (customFilter) {\n          currentResult = customFilter(filterObj.filterVal, result);\n        }\n\n        if (typeof currentResult === 'undefined') {\n          result = filterFn(result, dataField, filterObj, filterValue);\n        } else {\n          result = currentResult;\n        }\n      }\n    });\n    return result;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}